<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 加载db.properties文件中的内容 -->
	<context:property-placeholder
		location="classpath:ssmi/jdbc.properties" />

	<!-- c3p0连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 driver、url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}" /> 
	    <property name="url" value="${jdbc.url}" />
	   	<property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
	    <property name="initialSize" value="5" />
	   	<!-- 最小连接池数量 --> 
	    <property name="minIdle" value="5" /> 
	    <!-- 最大连接池数量 -->
	    <property name="maxActive" value="500" />
	
		<!-- 获取连接时最大等待时间，单位毫秒。这里是60秒 -->
	    <property name="maxWait" value="60000" />
	    
		<!-- 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒。这里是60秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	
		<!-- 一个连接在池中最小生存的时间或连接保持空闲而不被驱逐的最长时间，单位是毫秒。这里是5分钟 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	
		<!-- 用来检测连接是否有效的sql -->
	    <property name="validationQuery" value="SELECT COUNT(*) FROM DUAL" />
	    <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
	    <property name="testWhileIdle" value="true" />
	    <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
	    <property name="testOnBorrow" value="false" />
	    <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
	    <property name="testOnReturn" value="false" />
	    
	    <!-- 打开removeAbandoned连接泄漏监测功能 -->
	    <property name="removeAbandoned" value="true" /> 
	    <!-- 1800秒，也就是30分钟 -->
	    <property name="removeAbandonedTimeout" value="1800" /> 
	    <!-- 关闭abanded连接时输出错误日志 -->
	    <property name="logAbandoned" value="true" /> 
	
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    
	    <!-- 定期把监控数据输出到日志中，单位是毫秒。这里是30秒 -->
	    <property name="timeBetweenLogStatsMillis" value="30000" />
	    
	    <!-- 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢，这里设置为5秒 -->
	    <property name="connectionProperties" value="druid.stat.slowSqlMillis=5000" />
	    
	    <!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" />
	    
	    <property name="statLogger" ref="myStatLogger" />
	    
	</bean>

	<bean id="myStatLogger" class="com.log.XTLogger"/>
	<context:component-scan base-package="com.bean,com.services.*"/>
	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation"
			value="classpath:ssmi/sqlmybatis.xml" />
	</bean>

	<!-- mapper扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描包路径，如果需要扫描多个，中间使用半角逗号隔开 -->
		<property name="basePackage" value="com.mapper" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>

	<!-- 事物管理器 对mybatis操作数据库事务控制，spring使用jdbc的事务控制类 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 dataSource在applicationContext-dao.xml中配置了 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 通知 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS"
				read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- aop -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.services.*.*(..))" />
	</aop:config>

</beans>